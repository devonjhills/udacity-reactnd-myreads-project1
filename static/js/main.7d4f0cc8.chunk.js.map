{"version":3,"sources":["BooksAPI.js","constants.js","components/MoveToShelfMenu.js","components/BookCard.js","components/BookList.js","components/SearchBar.js","components/SearchResults.js","components/Header.js","components/ShelfHeader.js","components/Shelves.js","components/Footer.js","components/Homepage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","console","log","search","query","data","errors","books","SHELFINFO","key","label","MoveToShelfMenu","updateBook","className","DropdownButton","title","icon","faChevronCircleDown","size","variant","defaultValue","onSelect","eventKey","map","item","Dropdown","Item","disabled","style","background","BookCard","Col","xs","sm","md","lg","xl","Card","border-variant","bg-variant","text","border","Img","width","height","src","imageLinks","thumbnail","alt","Body","Title","Subtitle","authors","join","BookList","Row","SearchBar","handleQuery","Container","InputGroup","Prepend","to","Button","faArrowLeft","FormControl","type","placeholder","value","onChange","event","target","SearchResults","useState","setQuery","bookResults","setBookResults","a","BooksAPI","error","Array","isArray","thisBook","find","Jumbotron","length","faFrown","Header","Navbar","fixed","bg","Brand","eventkey","faBook","Nav","Link","as","faDatabase","faPlus","ShelfHeader","props","heading","faBookOpen","Shelves","shelfName","fluid","Footer","position","Text","Collapse","ButtonGroup","href","faGithub","faLinkedin","Homepage","displayShelves","filter","App","setBooks","getAllBooks","shelfChange","onShelf","newBooks","push","useEffect","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7d4f0cc8.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n    .then(console.log('test get'))\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n    .then(console.log('test getall'))\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n    .then(console.log('test update'))\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then((data) => {\n      if (!data.errors) {\n        return data.books;\n      } else {\n        console.log('ERROR SEARCHING');\n        return [];\n      }\n    });\n","export const SHELFINFO = [\n  {\n    key: 'currentlyReading',\n    label: 'Currently Reading'\n  },\n  {\n    key: 'wantToRead',\n    label: 'Want To Read'\n  },\n  {\n    key: 'read',\n    label: 'Read'\n  },\n  {\n    key: 'none',\n    label: 'None'\n  },\n]","import { DropdownButton, Dropdown } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleDown } from '@fortawesome/free-solid-svg-icons'\nimport { SHELFINFO } from '../constants'\n\nconst MoveToShelfMenu = ({ book, updateBook }) => {\n\n  const handleSelection = (eventKey) => {\n    const shelf = eventKey;\n    updateBook(book, shelf);\n  }\n\n  return (\n    <div className=\"book-shelf-changer\">\n      <DropdownButton\n        title={\n          <FontAwesomeIcon\n            title={'Move To Shelf'}\n            icon={faChevronCircleDown}\n            size={'2x'} />}\n        id=\"dropdown-menu\"\n        variant=\"light\"\n        size=\"sm\"\n        defaultValue={book.shelf ? book.shelf : 'none'}\n        onSelect={handleSelection}>\n        {SHELFINFO.map(\n          (item) => (\n            <Dropdown.Item\n              key={item.key}\n              eventKey={item.key}\n              disabled={item.key === book.shelf}\n              style={item.key === book.shelf ? { background: 'black' } : { background: '' }}>\n              {item.label}\n            </Dropdown.Item>\n          ))}\n      </DropdownButton>\n    </div>\n  )\n}\n\nexport default MoveToShelfMenu\n\n\n\n\n\n\n\n\n/* display options:\n\n  const shelfInfo = [\n    {\n      key: 'currentlyReading',\n      label: 'Currently Reading'\n    },\n    {\n      key: 'wantToRead',\n      label: 'Want To Read'\n    },\n    {\n      key: 'read',\n      label: 'Read'\n    },\n    {\n      key: 'none',\n      label: 'None'\n    }\n\n\n      <DropdownButton\n        title={\n          <FontAwesomeIcon\n            title={'Move To Shelf'}\n            icon={faChevronCircleDown}\n            size={'2x'} />}\n        id=\"dropdown-menu\"\n        variant=\"light\"\n        size=\"sm\"\n        defaultValue={book.shelf ? book.shelf : 'none'}\n        onSelect={handleSelection}>\n        {shelfInfo.map(\n          (item) => (\n            <Dropdown.Item\n              key={item.key}\n              eventKey={item.key}\n              disabled={item.key === book.shelf}\n              style={item.key === book.shelf ? { background: 'black' } : { background: '' }}>\n              {item.label}\n            </Dropdown.Item>\n          ))}\n      </DropdownButton>\n\n\n\n    <ToggleButtonGroup\n      type=\"radio\"\n      name=\"options\"\n      size=\"sm\"\n      defaultValue={book.shelf ? book.shelf : 'none'}>\n      {shelfInfo.map(\n        (item) => (\n          <ToggleButton\n            key={item.key}\n            value={item.key}\n            variant=\"outline-dark\"\n            disabled={item.key === book.shelf}\n            onClick={handleSelection}>\n            {item.label}\n          </ToggleButton>\n        ))}\n    </ToggleButtonGroup>\n\n\n\n      <select\n        value={book.shelf ? book.shelf : 'none'}\n        onChange={(event) => { updateBook(book, event.target.value) }}>\n        <option value=\"move\" disabled>Move to...</option>\n\n        <option value=\"currentlyReading\">Currently Reading</option>\n\n        <option value=\"wantToRead\">Want to Read</option>\n\n        <option value=\"read\">Read</option>\n\n        <option value=\"none\">None</option>\n\n      </select>\n*/\n","import React from 'react'\nimport { Card, Col } from 'react-bootstrap'\nimport MoveToShelfMenu from './MoveToShelfMenu'\n\nconst BookCard = ({ book, updateBook }) => {\n  return (\n    <Col className=\"mb-1 mt-2\" xs sm md={6} lg={4} xl={4}>\n      <Card border-variant=\"dark\"\n        bg-variant=\"dark\"\n        text=\"info\"\n        border=\"dark\"\n        className=\"text-center\">\n        <div className=\"card-horizontal\">\n          <Card.Img\n            style={{ width: 128, height: 193 }}\n            src={book.imageLinks && book.imageLinks.thumbnail}\n            alt=\"Book Cover Not Available\">\n          </Card.Img>\n          <Card.Body>\n            <Card.Title>{book.title}</Card.Title>\n            <Card.Subtitle\n              className=\"text-muted mb-3\">\n              {(book.authors) ? (book.authors).join(\", \") : 'No Author Listed'}\n            </Card.Subtitle >\n          </Card.Body>\n        </div>\n        <MoveToShelfMenu\n          updateBook={updateBook}\n          book={book} />\n      </Card>\n    </Col>\n  )\n}\n\nexport default BookCard\n","import React from 'react'\nimport { Row } from 'react-bootstrap'\nimport BookCard from './BookCard'\n\nconst BookList = ({ books, updateBook }) => {\n  return (\n    <Row className=\"m-0\">\n      {books.map(book => (\n        <BookCard\n          key={book.id}\n          updateBook={updateBook}\n          book={book}\n        />\n      ))}\n    </Row>\n  )\n}\n\nexport default BookList\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport React from 'react'\nimport { Button, Container, FormControl, InputGroup } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst SearchBar = ({ query, handleQuery }) => {\n  return (\n    <Container>\n      <InputGroup className=\"mb-5\">\n        <InputGroup.Prepend>\n          <Link to='/'>\n            <Button\n              variant=\"dark\"\n              title=\"Return Home\">\n              <FontAwesomeIcon icon={faArrowLeft} />\n            </Button>\n          </Link>\n        </InputGroup.Prepend>\n        <FormControl\n          type=\"text\"\n          placeholder=\"Search by title or author\"\n          value={query}\n          onChange={(event) => handleQuery(event.target.value)}\n        />\n      </InputGroup>\n    </Container>\n  )\n}\n\nexport default SearchBar\n","import React, { useState } from 'react';\nimport BookList from './BookList';\nimport * as BooksAPI from '../BooksAPI';\nimport SearchBar from './SearchBar';\nimport { Jumbotron } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFrown } from '@fortawesome/free-solid-svg-icons'\n\nconst SearchResults = ({ books, updateBook }) => {\n\n  const [query, setQuery] = useState(\"\");\n  const [bookResults, setBookResults] = useState([]);\n\n  const handleQuery = async (query) => {\n    setQuery(query);\n    if (query !== '') {\n      await BooksAPI.search(query).then((data) => {\n        if (!data || data.error) {\n          setBookResults([]);\n        } else if (Array.isArray(data)) {\n          data = data.map((book) => {\n            const thisBook = books.find(({ id }) => book.id === id);\n            return {\n              ...book,\n              shelf: thisBook?.shelf ?? 'none',\n            }\n          })\n          setBookResults(data);\n        }\n      })\n    } else {\n      setBookResults([]);\n    }\n  };\n\n  return (\n    <Jumbotron className=\"m-1\">\n      <SearchBar query={query} handleQuery={handleQuery} />\n      <div className=\"search-books-results\">\n        {bookResults.length > 0 ?\n          <BookList\n            books={bookResults}\n            updateBook={updateBook}\n          /> :\n          <h3 className=\"text-center mt-5\">\n            <FontAwesomeIcon className=\"mr-1\" icon={faFrown} />No Results\n          </h3>\n        }\n      </div>\n    </Jumbotron>\n  )\n};\n\nexport default SearchResults;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBook, faDatabase, faPlus } from '@fortawesome/free-solid-svg-icons'\nimport React from 'react'\nimport { Navbar, Nav, Button } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => {\n  return (\n    <Navbar fixed='top' bg=\"dark\" variant=\"dark\" >\n      <Navbar.Brand eventkey=\"disabled\" disabled>\n        <FontAwesomeIcon className=\"mr-1\" icon={faBook} />\n        MyReads\n      </Navbar.Brand>\n      <Nav.Link as={Link} to=\"/\">\n        <Button variant=\"dark\">\n          <FontAwesomeIcon className=\"mr-2\" icon={faDatabase} />My Shelves\n      </Button>\n      </Nav.Link>\n      <Nav.Link as={Link} to=\"/search\">\n        <Button variant=\"dark\">\n          <FontAwesomeIcon className=\"mr-2\" icon={faPlus} />Add New Books\n      </Button>\n      </Nav.Link>\n    </Navbar>\n  )\n}\n\nexport default Header","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBookOpen } from '@fortawesome/free-solid-svg-icons'\n\nconst ShelfHeader = (props) => {\n  return (\n    <h3 className=\"shelf-name\">\n      {props.heading}\n      <FontAwesomeIcon className=\"ml-2\" icon={faBookOpen} />\n    </h3>\n  )\n}\n\nexport default ShelfHeader","import React from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport BookList from './BookList'\nimport ShelfHeader from './ShelfHeader'\n\nconst Shelves = ({ books, updateBook, shelfName }) => {\n\n  return (\n    <Jumbotron fluid className=\"my-jumbo\">\n      <ShelfHeader heading={shelfName} />\n      <BookList\n        updateBook={updateBook}\n        books={books}\n      />\n    </Jumbotron>\n  )\n}\n\nexport default Shelves\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons'\nimport { Button, ButtonGroup, Navbar } from 'react-bootstrap'\n\n\nconst Footer = () => {\n  return (\n    <Navbar position=\"bottom\" bg=\"dark\" variant=\"light\">\n      <Navbar.Text className=\"text-muted\">\n        Created by Devon Hills\n      </Navbar.Text>\n      <Navbar.Collapse className=\"justify-content-end\">\n        <ButtonGroup>\n          <Button title=\"Github\" href=\"https://github.com/devonjhills\" variant=\"dark\">\n            <FontAwesomeIcon\n              title={'Github'}\n              icon={faGithub}\n              size={'2x'} />\n          </Button>\n          <Button title=\"LinkedIn\" href=\"https://www.linkedin.com/in/devonjhills/\" variant=\"dark\">\n            <FontAwesomeIcon\n              icon={faLinkedin}\n              size={'2x'} />\n          </Button>\n        </ButtonGroup>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport Shelves from './Shelves'\nimport { SHELFINFO } from '../constants'\nimport Footer from './Footer';\n\nconst Homepage = ({ books, updateBook }) => {\n\n  const displayShelves = SHELFINFO.filter(shelf => shelf.key !== 'none');\n\n  return (\n    <>\n      {displayShelves.map(shelf =>\n        <Shelves\n          updateBook={updateBook}\n          key={shelf.key}\n          shelfName={shelf.label}\n          books={books.filter(book => book.shelf === shelf.key)}\n        />\n      )}\n      <Footer />\n    </>\n  )\n}\n\nexport default Homepage\n","import React, { useEffect, useState } from 'react';\nimport './App.css'\nimport * as BooksAPI from './BooksAPI'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport SearchResults from './components/SearchResults'\nimport Header from './components/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Homepage from './components/Homepage';\n\nconst App = () => {\n\n  const [books, setBooks] = useState([]);\n\n  const getAllBooks = async () => {\n    await BooksAPI.getAll().then((data) => {\n      setBooks(data);\n    })\n  }\n\n  const updateBook = async (book, shelfChange) => {\n    await BooksAPI.update(book, shelfChange).then(() => {\n      let onShelf = false;\n      const newBooks = books.map((thisBook) => {\n        if (thisBook.id === book.id) {\n          onShelf = true;\n          return { ...thisBook, shelf: shelfChange };\n        }\n        return thisBook;\n      });\n      (!onShelf && newBooks.push({ ...book, shelf: shelfChange }))\n      setBooks(newBooks);\n    });\n  }\n\n  useEffect(() => {\n    getAllBooks();\n  }, []);\n\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact path='/'>\n          <Homepage books={books} updateBook={updateBook} />\n        </Route>\n        <Route path='/search'>\n          <SearchResults books={books} updateBook={updateBook} />\n        </Route>\n        <Route path=\"*\" render={() => <Redirect to=\"/\" />} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'))\n"],"sourceRoot":""}